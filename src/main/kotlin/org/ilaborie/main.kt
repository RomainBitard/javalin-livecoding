package org.ilaborie

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import io.javalin.Javalin
import io.javalin.apibuilder.ApiBuilder.get
import io.javalin.apibuilder.ApiBuilder.path
import io.javalin.apibuilder.ApiBuilder.post
import io.javalin.json.JavalinJackson
import java.time.Duration
import java.time.Instant
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.TimeUnit


fun main(args: Array<String>) {

    JavalinJackson.configure(jacksonObjectMapper())
    // Javalin Hello World
    // @see https://javalin.io/documentation
    Javalin.create()
        // configuration
        .enableCorsForAllOrigins() // FIXME
        .enableDebugLogging()
        .enableAutogeneratedEtags()
        .disableStartupBanner()
        // routing
        .routes {
            path("/api/emoji") {
                get("/") { it.json(EmojiRepository.findAll()) }
                get("/:name") { ctx ->
                    val name = ctx.pathParam("name")
                    ctx.json(EmojiRepository.findByName(name))
                }
                post("/") { ctx ->
                    val emoji = ctx.body<Emoji>()
                    ctx.json(EmojiRepository.insert(emoji))
                }
            }
        }
        // handle errors
        .exception(NoSuchElementException::class.java) { e, ctx ->
            ctx.status(404).result(e.message ?: "Oops !")
        }
        //  Static & WebSocket
        .enableStaticFiles("public")
        .ws("/ws/clock") { handler ->
            val ec = Executors.newSingleThreadScheduledExecutor()

            handler.onConnect { session ->

                ec.setInterval(1.second) {
                    session.send(Instant.now().toString())
                }

//                ec.scheduleAtFixedRate(
//                    { session.send(Instant.now().toString()) },
//                    0, 1, TimeUnit.SECONDS
//                )

            }
        }
        .start(8080)
}

fun ScheduledExecutorService.setInterval(
    duration: Duration,
    function: () -> Unit
) =
    this.scheduleAtFixedRate(function, 0, duration.toMillis(), TimeUnit.MILLISECONDS)

val Int.second: Duration
    get() = Duration.ofSeconds(this.toLong())

